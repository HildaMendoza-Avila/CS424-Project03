install.packages("rgeos")
install.packages("ggmap")
install.packages("mapdata")
install.packages("maptools")
install.packages("ggthemes")
library(ggplot2)
library(rgeos)
library(ggmap)
library(maps)
library(mapdata)
library(maptools)
library(ggthemes)
library(sp)
library(stringr)
library(plyr)
library(lubridate)
source('C:/Users/hilda/OneDrive/Desktop/CS 424/Week 12 Homework/CS 424 Week 12.R')
View(covidIL)
ggplot() + geom_polygon(data = ilCountyCovid, aes(x = long, y = lat, group = group, fill = cases), color = "black") + coord_fixed(1.2) +
geom_text(data = centroids2, aes(x = clong, y = clat, label = county), color = "black", size = 2.25) + scale_fill_distiller(palette = "Blues") +
labs(fill = "cases") + theme_map()
gsub("Mc Henry", "Mchenry", covidIL$county)
covidIL$county <- gsub("Mc Henry", "Mchenry", covidIL$county)
subset(covidIL, county == "Mchenry")
subset(covidIL, county == "Mc Henry")
subset(covidIL, county == "Mc Henry")
View(covidIL)
subset(covidIL, county == "McHenry")
covidIL$county <- gsub("McHenry", "Mchenry", covidIL$county)
subset(covidIL, county == "Mchenry")
#then take a look at the data for a given day on a map of Illinois counties. Note that today() can be a useful function to get today's date. Similarly today()-1 is yesterday. Note that the data in the file may be a day or two behind.
covidILOneDay <- subset(covidIL, newDate == "2021-03-15")
ilCountyCovid <- join(il, covidILOneDay)
ggplot() + geom_polygon(data = ilCountyCovid, aes(x = long, y = lat, group = group, fill = cases), color = "black") + coord_fixed(1.2) +
geom_text(data = centroids2, aes(x = clong, y = clat, label = county), color = "black", size = 2.25) + scale_fill_distiller(palette = "Blues") +
labs(fill = "cases") + theme_map()
covidIL$county <- gsub("DuPage", "Du Page", covidIL$county)
subset(covidIL, county == "Du Page")
covidIL$county <- gsub("McHenry", "Mchenry", covidIL$county)
subset(covidIL, county == "Mchenry")
covidIL$county <- gsub("DeKalb", "De Kalb", covidIL$county)
subset(covidIL, county == "De Kalb")
covidIL$county <- gsub("LaSalle", "La Salle", covidIL$county)
subset(covidIL, county == "La Salle")
covidIL$county <- gsub("McLean", "Mclean", covidIL$county)
subset(covidIL, county == "Mclean")
covidIL$county <- gsub("DuPage", "Du Page", covidIL$county)
subset(covidIL, county == "Du Page")
covidIL$county <- gsub("McDonough", "Mcdonough", covidIL$county)
subset(covidIL, county == "Mcdonough")
covidIL$county <- gsub("St. Clair", "St Clair", covidIL$county)
subset(covidIL, county == "St Clair")
#then take a look at the data for a given day on a map of Illinois counties. Note that today() can be a useful function to get today's date. Similarly today()-1 is yesterday. Note that the data in the file may be a day or two behind.
covidILOneDay <- subset(covidIL, newDate == "2021-03-15")
ilCountyCovid <- join(il, covidILOneDay)
ggplot() + geom_polygon(data = ilCountyCovid, aes(x = long, y = lat, group = group, fill = cases), color = "black") + coord_fixed(1.2) +
geom_text(data = centroids2, aes(x = clong, y = clat, label = county), color = "black", size = 2.25) + scale_fill_distiller(palette = "Blues") +
labs(fill = "cases") + theme_map()
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/dirSetup.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
Cook_county <- blocks(state = "IL", county = "Cook", year = 2010)
View(Cook_county)
colnames(Cook_county)
chicago_blocks <- subset(Cook_county, GEOID10 %in% energyData$CENSUS_BLOCK)
View(chicago_blocks)
mapview(chicago_blocks)
initial_area <- subset(energyData, COMMUNITY_AREA_NAME == "Near West Side")
View(initial_area)
initial_map <- subset(Cook_county, GEOID10 %in% initial_area$CENSUS_BLOCK)
mapview(initial_map)
View(initial_map)
View(initial_map)
mapview(initial_map, zcol = "INTPTLAT10")
colnames(initial_area)
initial_map$TOTAL_KWH <- 0
getYearlyElectricityUsage <- function(census_block) {
block_yearly_elec_entries <- subset(energyData, CENSUS_BLOCK == census_block)
yearlyElectricityUsageValue <- mean(block_yearly_elec_entries$TOTAL_KWH)
yearlyElectricityUsageValue
}
initial_map$TOTAL_KWH <- getYearlyElectricityUsage(initial_map$GEOID10)
getYearlyElectricityUsage <- function(census_block) {
block_yearly_elec_entries <- subset(energyData, CENSUS_BLOCK == census_block)
yearlyElectricityUsageValue <- mean(block_yearly_elec_entries$TOTAL_KWH)
yearlyElectricityUsageValue
}
initial_map$TOTAL_KWH <- getYearlyElectricityUsage(initial_map$GEOID10)
yearly_entries <- getYearlyElectricityUsage(initial_map$GEOID10)
block_yearly_elec_entries <- subset(energyData, CENSUS_BLOCK %in% initial_map$GEOID10)
block_yearly_elec_entries <- subset(energyData, CENSUS_BLOCK %in% initial_map$GEOID10)
View(getYearlyElectricityUsage)
View(block_yearly_elec_entries)
View(initial_area)
print(initial_area[initial_area$Freq > 1,])
initial_area[initial_area$Freq > 1,]
print(initial_area[initial_area$CENSUS_BLOCK > 1,])
View(initial_area)
initial_area[initial_area$CENSUS_BLOCK > 1,]
initial_map$TOTAL_KWH <- 0
View(initial_map)
View(initial_area)
colnames(energyData)
View(energyData)
View(energyData)
# All NA entries for columns (5:KWH_JANUARY_2010 - 17:TOTAL_KWH, 19:ZERO_KWH_ACCOUNTS - 32:TOTAL_THERMS, and 34:KWH_TOTAL_SQFT - 57:OCCUPIED_HOUSING_UNITS)
# inclusive should be replaced with 0 for ease of computation
energyData[is.na(energyData[5:7])] <- 0
# All NA entries for columns (5:KWH_JANUARY_2010 - 17:TOTAL_KWH, 19:ZERO_KWH_ACCOUNTS - 32:TOTAL_THERMS, and 34:KWH_TOTAL_SQFT - 57:OCCUPIED_HOUSING_UNITS)
# inclusive should be replaced with 0 for ease of computation
energyData[5:7][is.na(energyData[5:7])] <- 0
# All NA entries for columns (5:KWH_JANUARY_2010 - 17:TOTAL_KWH, 19:ZERO_KWH_ACCOUNTS - 32:TOTAL_THERMS, and 34:KWH_TOTAL_SQFT - 57:OCCUPIED_HOUSING_UNITS)
# inclusive should be replaced with 0 for ease of computation
energyData[5:7, , 9:10][is.na(energyData[5:7, , 9:10])] <- 0
# All NA entries for columns (5:KWH_JANUARY_2010 - 17:TOTAL_KWH, 19:ZERO_KWH_ACCOUNTS - 32:TOTAL_THERMS, and 34:KWH_TOTAL_SQFT - 57:OCCUPIED_HOUSING_UNITS)
# inclusive should be replaced with 0 for ease of computation
energyData[5:7, 9:10][is.na(energyData[5:7, 9:10])] <- 0
View(energyData)
# All NA entries for columns (5:KWH_JANUARY_2010 - 17:TOTAL_KWH, 19:ZERO_KWH_ACCOUNTS - 32:TOTAL_THERMS, and 34:KWH_TOTAL_SQFT - 57:OCCUPIED_HOUSING_UNITS)
# inclusive should be replaced with 0 for ease of computation
energyData[5:17][is.na(energyData[5:17])] <- 0
energyData[5:17][is.na(energyData[5:17])] <- 0
energyData[19:32][is.na(energyData[19:32])] <- 0
energyData[34:57][is.na(energyData[34:57])] <- 0
])] <- "Unknown"
energyData[33][is.na(energyData[33])] <- "Unknown"
# All NA entries for columns 18:ELECTRICITY_ACCOUNTS and 33:GAS_ACCOUNTS should be replaced with "Unknown"
energyData[18][is.na(energyData[18])] <- "Unknown"
# All NA entries for columns 18:ELECTRICITY_ACCOUNTS and 33:GAS_ACCOUNTS should be replaced with "Unknown"
energyData[18][is.na(energyData[18])] <- "Unknown"
energyData[33][is.na(energyData[33])] <- "Unknown"
names(Cook_county)[names(Cook_county) == "GEOID10"] <- "CENSUS_BLOCK"
View(Cook_county)
initial_map <- subset(Cook_county, CENSUS_BLOCK %in% initial_area$CENSUS_BLOCK)
View(initial_map)
initial_map$TOTAL_KWH <- 0
View(initial_area)
initial_area <- subset(energyData, COMMUNITY_AREA_NAME == "Near West Side")
View(initial_area)
block_yearly_elec_entries <- subset(energyData, CENSUS_BLOCK == census_block)#%in% initial_map$CENSUS_BLOCK)
getYearlyElectricityUsage <- function(census_block){
block_yearly_elec_entries <- subset(energyData, CENSUS_BLOCK == census_block)#%in% initial_map$CENSUS_BLOCK)
yearlyElectricityUsageValue <- mean(block_yearly_elec_entries$TOTAL_KWH)
ifelse(yearlyElectricityUsageValue > 0, yearlyElectricityUsageValue, 0)
}
View(getYearlyElectricityUsage)
initial_map$TOTAL_KWH <- getYearlyElectricityUsage(initial_map$CENSUS_BLOCK)
View(initial_map)
initial_map$TOTAL_KWH <- 0
initial_area[duplicated(initial_area$CENSUS_BLOCK) | duplicated(initial_area$CENSUS_BLOCK, fromLast=TRUE), ]
View(initial_area)
options(scipen = 100)
initial_area[duplicated(initial_area$CENSUS_BLOCK) | duplicated(initial_area$CENSUS_BLOCK, fromLast=TRUE), ]
library(gdata)
install.packages("gdata")
library(gdata)
initial_area[duplicated2(initial_area$CENSUS_BLOCK), ]
initial_area$CENSUS_BLOCK
ta <- table(initial_area$CENSUS_BLOCK)
initial_area[initial_area$CENSUS_BLOCK %in% names(ta)[ta > 1], ]
#calculate range
max(initial_area$CENSUS_BLOCK, na.rm=TRUE) - min(initial_area$CENSUS_BLOCK, na.rm=TRUE)
max(initial_area$CENSUS_BLOCK, na.rm=TRUE)
min(initial_area$CENSUS_BLOCK, na.rm=TRUE)
nrow(energyData)
colnames(initial_area)
fst <- curr_block_subset[1,]
colnames(initial_area)
colnames(initial_area)
mean(initial_area$KWH_JANUARY_2010)
o <- mean(curr_block_subset$o)
o <- mean(curr_block_subset$o)#
o <- mean(curr_block_subset$o)
o <- mean(curr_block_subset$o)
o <- mean(curr_block_subset$o)
colnames(initial_area)
append(1:5, 0:1, after = 3)
append(1:5, 0:1)
colnames(initial_area)
append(1:5, 0:1)
colnames(initial_area)
# Create a 'Multiple' entry and correctly integrate the multiple values
#calculate range
min_census_block <- min(energyData$CENSUS_BLOCK, na.rm=TRUE)
max_census_block <- max(energyData$CENSUS_BLOCK, na.rm=TRUE)
getNewEntryDataFrame <- function(){
fst <- curr_block_subset[1,]
c <- c(fst$COMMUNITY_AREA_NAME, fst$CENSUS_BLOCK, "Multiple")
n <- c(fst$CENSUS_BLOCK)
# add the mean values for each column in the subset with multiple entries for the same census block
for(colNum in 5:57){
if(colNum != 18 && colNum != 33){
append(n, mean(curr_block_subset[colNum]))
}
}
data.frame(c[1], n[1], c[2], c[2], n[2:14], c[2], n[15:28], c[2], n[29:length(n)])
}
for(curr_census_block in min_census_block:max_census_block){
curr_block_subset <- subset(energyData, CENSUS_BLOCK == curr_census_block)
if(nrow(curr_block_subset) > 1){  # Add a new row to energyData
# Create a Data Frame with the values of the new entry - Step 1
multiples_entry <- getNewEntryDataFrame()
# Name the columns of the Data Frame (same as the columns in energyData) - Step 2
names(multiples_entry) <- c("COMMUNITY_AREA_NAME","CENSUS_BLOCK","BUILDING_TYPE","BUILDING_SUBTYPE","KWH_JANUARY_2010","KWH_FEBRUARY_2010","KWH_MARCH_2010","KWH_APRIL_2010","KWH_MAY_2010","KWH_JUNE_2010","KWH_JULY_2010","KWH_AUGUST_2010","KWH_SEPTEMBER_2010","KWH_OCTOBER_2010","KWH_NOVEMBER_2010","KWH_DECEMBER_2010","TOTAL_KWH","ELECTRICITY_ACCOUNTS","ZERO_KWH_ACCOUNTS","THERM_JANUARY_2010","THERM_FEBRUARY_2010","THERM_MARCH_2010","TERM_APRIL_2010", "THERM_MAY_2010","THERM_JUNE_2010","THERM_JULY_2010","THERM_AUGUST_2010","THERM_SEPTEMBER_2010","THERM_OCTOBER_2010","THERM_NOVEMBER_2010","THERM_DECEMBER_2010","TOTAL_THERMS","GAS_ACCOUNTS","KWH_TOTAL_SQFT","THERMS_TOTAL_SQFT","KWH_MEAN_2010","KWH_MINIMUM_2010","KWH_MAXIMUM_2010","KWH_SQFT_MEAN_2010","KWH_SQFT_MINIMUM_2010","KWH_SQFT_MAXIMUM_2010","THERM_MEAN_2010","THERM_MINIMUM_2010","THERM_MAXIMUM_2010","THERMS_SQFT_MEAN_2010","THERMS_SQFT_MINIMUM_2010","THERMS_SQFT_MAXIMUM_2010","TOTAL_POPULATION","TOTAL_UNITS","AVERAGE_STORIES","AVERAGE_BUILDING_AGE","AVERAGE_HOUSESIZE","OCCUPIED_UNITS","OCCUPIED_UNITS_PERCENTAGE","RENTER_OCCUPIED_HOUSING_UNITS","RENTER_OCCUPIED_HOUSING_PERCENTAGE","OCCUPIED_HOUSING_UNITS")
# Using rbind() function to insert new row with "Multiple" information
energyData <- rbind(energyData, multiples_entry)
}
}
View(block_yearly_elec_entries)
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
# trying to figure out what is happening
print(n)
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
nrow(energyData)
View(energyData)
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
View(energyData)
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
all_blocks <- energyData[2][[1,2]]
for(x in 2:nrow(energyData)){
all_blocks <- append(all_blocks, energyData[2][[x,2]])
}
all_blocks <- energyData[2]
View(all_blocks)
all_blocks <- energyData[2][[1,2]]
all_blocks <- energyData[2][[1,1]]
for(x in 2:nrow(energyData)){
all_blocks <- append(all_blocks, energyData[2][[x,1]])
}
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
# Create a 'Multiple' entry and correctly integrate the multiple values
getNewEntryDataFrame <- function(){
# print("Just Entered Function")
fst <- curr_block_subset[1,]
c <- c(fst$COMMUNITY_AREA_NAME, fst$CENSUS_BLOCK, "Multiple")
n <- c(fst$CENSUS_BLOCK)
print(n)
# add the mean values for each column in the subset with multiple entries for the same census block
for(colNum in 5:57){
# print(colNum)
if(colNum != 18 && colNum != 33){
a <- curr_block_subset[colNum]
vals <- a[[1,1]]
if(nrow(a) == 2){
vals <- append(vals, a[[2,1]])
}
if(nrow(a) > 2){
for(x in 2:nrow(a)){
vals <- append(vals, a[[x,1]])
}
}
n <- append(n, mean(vals))
}
}
data.frame(c[1], n[1], c[2], c[2], n[2:14]) #, c[2], n[15:28], c[2], n[29:length(n)])
}
all_blocks <- energyData[2][[1,1]]
for(x in 2:nrow(energyData)){
all_blocks <- append(all_blocks, energyData[2][[x,1]])
}
for(curr_census_block in all_blocks){
curr_block_subset <- subset(energyData, CENSUS_BLOCK == curr_census_block)
# print("for-loop")
# print(curr_census_block)
if(nrow(curr_block_subset) > 1){  # Add a new row to energyData
# print(curr_census_block)
# Create a Data Frame with the values of the new entry - Step 1
multiples_entry <- getNewEntryDataFrame()
# Name the columns of the Data Frame (same as the columns in energyData) - Step 2
names(multiples_entry) <- c("COMMUNITY_AREA_NAME","CENSUS_BLOCK","BUILDING_TYPE","BUILDING_SUBTYPE","KWH_JANUARY_2010","KWH_FEBRUARY_2010","KWH_MARCH_2010","KWH_APRIL_2010","KWH_MAY_2010","KWH_JUNE_2010","KWH_JULY_2010","KWH_AUGUST_2010","KWH_SEPTEMBER_2010","KWH_OCTOBER_2010","KWH_NOVEMBER_2010","KWH_DECEMBER_2010","TOTAL_KWH","ELECTRICITY_ACCOUNTS","ZERO_KWH_ACCOUNTS","THERM_JANUARY_2010","THERM_FEBRUARY_2010","THERM_MARCH_2010","TERM_APRIL_2010", "THERM_MAY_2010","THERM_JUNE_2010","THERM_JULY_2010","THERM_AUGUST_2010","THERM_SEPTEMBER_2010","THERM_OCTOBER_2010","THERM_NOVEMBER_2010","THERM_DECEMBER_2010","TOTAL_THERMS","GAS_ACCOUNTS","KWH_TOTAL_SQFT","THERMS_TOTAL_SQFT","KWH_MEAN_2010","KWH_MINIMUM_2010","KWH_MAXIMUM_2010","KWH_SQFT_MEAN_2010","KWH_SQFT_MINIMUM_2010","KWH_SQFT_MAXIMUM_2010","THERM_MEAN_2010","THERM_MINIMUM_2010","THERM_MAXIMUM_2010","THERMS_SQFT_MEAN_2010","THERMS_SQFT_MINIMUM_2010","THERMS_SQFT_MAXIMUM_2010","TOTAL_POPULATION","TOTAL_UNITS","AVERAGE_STORIES","AVERAGE_BUILDING_AGE","AVERAGE_HOUSESIZE","OCCUPIED_UNITS","OCCUPIED_UNITS_PERCENTAGE","RENTER_OCCUPIED_HOUSING_UNITS","RENTER_OCCUPIED_HOUSING_PERCENTAGE","OCCUPIED_HOUSING_UNITS")
# Using rbind() function to insert new row with "Multiple" information
energyData <- rbind(energyData, multiples_entry)
}
}
